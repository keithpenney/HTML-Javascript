Javascript Language Notes

General:
    Interpreted language.
    Case-sensitive.
    Lines should end with semi-colons; if they don't, Automatic Semi-Colon Insertion (ASI) occurs.
    Built for web as a complement to HTML and CSS.
    Comments are C-style // single line or /* multi-line */
    JavaScript is loaded on a page in the brower's JavaScript engine after the HTML and CSS.
    Each browser tab is its own "execution environment" (no tab-to-tab scripting)

Applying JavaScript to HTML:
    In-line HTML:
        <script>
          // JavaScript code goes here 
        </script>
    External JavaScript:
        <script src="myscript.js"></script>

    HTML can also take JavaScript as e.g. attribute values, but this is BAD practice.
        <button onclick="myButtonHandler()">A dynamic button</button>

Web Console:
    Since JavaScript is an interpreted language, we can interact with a session 'live' (like Python's console).
    To do this, we can open any script/html document in a browser and use the "Web Console" or "JavaScript Console"
    listed under the developer tools.

    console.log()       Output to the console

Reserved Keywords:
    false               Boolean false value.
    function            Declare a function.
    return              Return a value (or nothing) from a function.
    true                Boolean true value.
    typeof              Returns the type of a variable.  NOT a function! // typeof myVar;
    undefined           This is the value for a var that has been declared but not initialized/assigned.
    var                 Declare a variable.

Operators:
    Arithmetic
    +, -, *, /, %       Addition, subtraction, multiplication, float division, modulo (remainder)
    +=, -=, *=, /=      Add-assign, subtract-assign, multiply-assign, divide-assign
    ++, --              Increment, decrement.  Can be pre-fix or post-fix w/ the typical results.

    Comparison
    ===                 Strict equality (e.g. a === b; is a exactly equal to b?)
    !==                 Inequality.
    >, <, >=, <=        Less than, greater than, less than or equal, greater than or equal

    Boolean
    &&, ||              Boolean AND and OR respectively.

    Ternary             Just like other C-type languages, JavaScript supports the ternary operator
    (TEST) ? T : F      Evaluates 'TEST'; returns T if TEST === true, F if TEST === false

Variables:
    Variables are weakly typed (duck typing).  The type of a variable is inherited from its value.
    Variable names can include underscore "_", letters, dollar sign "$", or digit (cannot start with digit).
    Variables are declared with the "var" keyword.
    // ---- Syntax Example ---- //
        var myVariable = someValue;
    // ---- End Example ---- //

    Methods and Properties:
        The type of the variable determines the available properties and methods.

        Universal Properties:
            style

        Universal Methods:
            toString()
            valueOf()

    Strings:
        Single quotes '' or double quotes "" are both acceptable (as long as they match).
        Accepts escape sequences.  E.g.: \n, \t, \uXXXX (unicode codepoint)
        Strings can be concatenated with the '+' operator.  When using the '+' operator between a string and a number,
        it is implied that the number will be converted to a string (using the 'tostring()' method).  This is bad form.
        Just be explicit about converting objects to the exact type you intend.
        Strings are compared using the boolean > and < operators.  Same results as C's strcmp()
        String literals and primitives have access to the same methods/properties as instances of the "String" class,
        but there are differences in how the string literal is interpreted at construction.

        Convert a string to a number with Number()

        String Object Methods:
            s.charAt(n)             // Return the character at index n.  str.charAt(n) -> str[n];
            s.indexOf(b)            // Return the starting index of substring 'b' contained within string 's'.
                                    // Returns -1 if 'b' is NOT contained within 's'.
            s.replace(from, to)     // Returns a copy of 's' with substring 'from' replaced with string 'to'
            s.slice(nb, ne)         // Returns the slice of 's' from index 'nb' to index 'ne'.
                                    // If 'ne' not provided, assumes ne = s.length - 1
            s.search(regexp)        // Returns the first index of a substring matching regexp in 's' (or -1 otherwise).
            s.split(sep [,lim])     // Returns an array of substrings of 's' split by string 'sep' (up to 'lim' if given)
            s.toUpperCase()         // Returns 's' with all characters in UPPERCASE
            s.toLowerCase()         // Returns 's' with all characters in lowercase
            s.trim()                // Returns 's' with whitespace trimmed from both left and right sides.
            s.valueOf()             // Returns the string primitive value of 's'

        String Object Properties:
            s.length                // The number of characters in the string (not counting nul terminator)

    Arrays:
        Arrays can be of mixed type (like a C-style void *[])
        // ---- Syntax Example ---- //
        var myArray = [4, 220, 32.1, -7];
        var myOtherArray = ["Keef", 'hablas', 'meijor'];
        var anotherArray = ["Words", 42, ["sub", 3.14159, "array"], 0];     // An array of mixed types (and nested)

        Array Object Methods:
            a.join(ch)              // Returns a string of all elements of 'a' concatenated with adjoining string 'ch'
            a.push(x)               // Appends item 'x' to the end of array 'a'.  Returns resulting index of 'x' in 'a'
            a.pop()                 // Removes and returns the last item in array 'a'.
            a.shift()               // Removes and returns the first item in array 'a'. (backwards pop())
            a.unshift(x)            // Adds item 'x' to the beginning of array 'a', returns new array length

        Array Object Properties:
            a.length                // Returns the length of array 'a'

    Objects:
        JavaScript "objects" are like a cross between Python objects and dicts.
        // ---- Syntax Example ---- //
        var dog = {breed : "mutt", name : "Roy Blount"};
        console.log(dog.name);  // Fetch an object property like pointer dereference

Functions:
    Functions work pretty much as expected for a weakly typed language.
    One notable difference with Python is the lack of a notion of "args vs. kwargs".  In JavaScript, any parameter can
    have a default value and can be defined in any order.

    When a function is called arguments are assigned to parameters left-to-right.  If a parameter did not receive a
    value, it takes on its default value if it has one.  If it does not have a value, it takes on the value 'undefined'

    // ---- Syntax Example ---- //
    function foo(arg1, arg2 = 99, arg3) {
      // Note that arg1 and arg3 have no default value but arg2 does.
      var bar = arg1 + arg1;    // Do stuff with arguments arg1 and arg2 (non-typed, of course)
      return bar;               // Return a value
    }
    // ----  End Example  ---- //

    Anonymous Functions:
        In JavaScript, anonymous functions are primarily used for event handlers.

        // ---- Example ---- //
        function() {
          console.log("I have no name!");
        }

        myButton.onclick = function() {
          alert("Thanks for clicking the button.");
        }
        // ----  End Example  ---- //

    Generator Function:
        // ---- Syntax Example ---- //
        function* myFunc(arg1, arg2, arg3) {
            // stuff
        }
        // ----  End Example  ---- //

    Arrow Functions:
        Arrow functions (named for their syntax) were created to solve a problem with object methods being able to
        properly refer to their parent object via the Java-style 'this' keyword.
        Normal functions automatically define their 'this' keyword when executed in a global context.
        Arrow functions don't do this, so their 'this' keyword refers to the enclosing execution context.
        // ---- Syntax Example ---- //
        (arg1, arg2, arg3) => {
          // statements
          return;                   // Optionally return a value
        }

        var myArrowFunc = () => { console.log("This is an arrow function!"); }

    Built-In Functions:
        isNaN(n)                    // Returns true if 'n' === NaN (not a number)

Flow Control:
    Conditionals:
        The reserved keywords for boolean true and false are "true" and "false" (lowercase).
        The following values are evaluated as false:
            false, undefined, null, 0, NaN, '' (empty string)
        Any value that is not listed above will evaluate as true.

    If Statement:
        // ---- Syntax Example ---- //
        if ( CONDITION ) {
            // Do stuff if CONDITION === true
        } else if ( CONDITION2 ) {
            // Do stuff if CONDITION2 === true
        } else {
            // Do stuff if neither condition is true
        }
        Recall that the ternary operator (see 'Operators' above) can replace simple If statements and save space.

    For Loop:
        // ---- Syntax Example ---- //
        for (var i = 0; i < 10; i++) {
            // do this until i >= 10
        }

    Switch Statements:
        // ---- Syntax Example ---- //
        switch (EXPRESSION) {
          case VAL1:
            // run if EXPRESSION === VAL1
            break;
          case VAL2:
            // run if EXPRESSION === VAL2
            break;
          default:
            // run if EXPRESSION === some other value besides VAL1 or VAL2
            // default case doesn't need 'break'
        }

    While Loop:
        Just like in C, the "while loop" checks the condition before running the code, the "do-while loop" checks the
        condition after running the code (for the first time).
        // ---- Syntax Example ---- //
        while (CONDITION) {
          // do stuff.  Make sure to iterate some value to prevent an infinite loop.
        }

    Do-While Loop:
        // ---- Syntax Example ---- //
        do {
          // do stuff.  Again, make sure to iterate some value to prevent an infinite loop.
        } while (CONDITION);    // Note the semi-colon

Events:
    There are several ways to make a function respond to an event.
    // ---- Example ---- //
    button.onClick = someFunction();
    button.addEventListener('click', someFunction);

User Interface:
    // ---- Examples ---- //
    window.alert(msg);                  // a pop-up windows with a message 'msg' and an 'ok' button
    var response = window.prompt(msg);  // a window with an input field showing 'msg' and asking for user input
    
Browser APIs:
    Document Object Model (DOM) API:    Enables dynamic manipulation of HTML elements.
        document.querySelector('sel')   Returns a reference to the first object matching CSS selector 'sel'
        document.querySelectorAll('sel') Returns a list of references for all objects matching CSS selector 'sel'

    Geolocation API:                    Enables discovery of user location and GPS.
    Canvas API:                         2D graphics and animation
    WebGL API:                          3D graphics and animation
    HTMLMediaElement API:               Enables playing audio/video and interfacing with cameras/mics.

    Third-Party APIs:
        Google Maps API:                    Embed Google Maps in your page; map routes, etc.
        Instagram, Twitter, etc.            All this bullshit.

