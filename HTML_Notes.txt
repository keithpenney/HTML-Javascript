HTML5 Notes:

General:
    HyperText Markup Language
    Case insensitive
    Whitespace is ignored (condensed to single space)
    Modern HTML should describe what content IS not how it LOOKS.
    <!-- Comments are wrapped in these monstrosities -->

Basic Format:
    <!DOCTYPE html>
    <html lang="en-US">             <!-- Optionally provide a language for the page. -->
      <head>
        <meta charset="utf-8">
        <title>Title of Page</title>
      </head>
      <body>
        <p>Some page content</p>
      </body>
    </html>

    Language:
        The language of the entire document can be specified in the <html> tag
        Alternatively, you can specify the language of a section of text with: <span lang="">...</span>
        Language options: https://www.w3.org/International/articles/language-tags/

    The Head:
        The content of the HTML head is not displayed in the browser.
        Contains info about author, page title, CSS, and other metadata.
        <title></title>             The title appears at the top of the browser tab as the name of the page
        <h1></h1>                   This title renders in the body; Should only be used once per page.
        <meta charset="utf-8">      This is the best charset to use for most any language
        <meta name="" content="">   'name' could be "author", "description"
                                    Facebook uses "og:..." for Open Graph Data; Twitter uses "twitter:..."
        <link ...>                  The link element is used to extend HTML with CSS or Javascript.
                                    Also used for icons (see below).

Special Characters:
    <       &lt;
    >       &gt;
    "       &quot;
    '       &apos;
    &       &amp;
    %       &percent;
    +       &add;
    =       &equal;
    Comprehensive list: https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references

Percent-Encoding:
    (CR)    %0A     <!-- Carriage return (CR) and linebreak (LB) are best used together for compatibility %0A%0D -->
    (LB)    %0D
    (space) %20     |       :       %3A
    !       %21     |       ;       %3B
    "       %22     |       <       %3C
    #       %23     |       =       %3D
    $       %24     |       >       %3E
    %       %25     |       ?       %3F
    &       %26     |       @       %40
    '       %27     |       [       %5B
    (       %28     |       \       %5C
    )       %29     |       ]       %5D
    *       %2A     |   
    +       %2B     |   
    ,       %2C     |   
    -       %2D     |   
    .       %2E     |   
    /       %2F     |   

Text Elements:
    Text markup elements include an an opening tag, content, then a closing tag
    Several other elements (e.g. images, embedded content) are only a single tag.
    <NAME ATTR1="" ATTR2="" ...>
        'NAME' is the attribute name (a reserved keyword)
        'ATTR1' is an attribute (keyword) which can be assigned to a value ""
        'ATTR2' is another attribute

    <a></a>                     "Anchor"; can be a link
    <p></p>                     Define a paragraph element
    <em></em>                   Emphasized (normally rendered italics).
    <strong></strong>           Strong emphasis (typically bold)
    <code></code>               Used for code.  Stands out from normal text.
    <pre></pre>                 Same as 'code' but retains whitespace.
    <cite></cite>               Used for quote citation - provides a tooltip with original content info.
    <sup></sup>                 Superscript.
    <sub></sub>                 Subscript.

    <!-- Try to avoid these if possible, but they still exist -->
    <i></i>                     Italics.  Use only for foreign words, technical terms, a thought, etc.
    <b></b>                     Bold.  Use for key words, product names, etc.
    <u></u>                     Underline.  Avoid use - can be easily confused with links.

    Text Structure and Formatting:
        Headers not only help formatting text for reading, they also help with search engine optimization (SEO), screen
        readers for visually impaired, and successful javascript and css targetting.
        <h1></h1>               Main page header
        <h2></h2>               Subheader
        ...                     Sub-subheader
        <h6></h6>               Sub-sub-sub-sub-subheader

    Links:
        <a href="http://..." title="">
        Attributes:
            href                    The hypertext reference.  A file path, URL, text ID, or mailto:email address.  When 
                                    linking to a text ID (defined previously with id=""), a pound sign "#" precedes the ID.
            title                   Text which appears as a tooltip on mouse hover
            target                  "_blank" : Makes the link open in a new tab rather than the current tab
            download                Provide a default name for a linked file to be downloaded.

        Relative vs. Absolute URLs:
            Whenever possible, use relative URLs (unless, obviously, linking to an external resource).  An absolute URL
            starts with a lookup in a DNS server and so is more cumbersome to the network.

        Linking to Email Addresses:
            <a href="mailto:name@example.com&subject=A%20fun%20example&body=This%20is%20an%20email">Email Example</a>
            If no email address is provided, a "new mail" window will still be opened in the default mail client.

    Quotations:
        Block Quotations:
            The <blockquote> element will partition the quote into its own block.  It's helpful to use the 'cite'
            attribute to point to the original URL from which you are quoting.
            <blockquote cite="https://...">Here's a big block quote from this URL.</blockquote>

        Inline Quotations:
            This website says: <q cite="https://...">a short quote with no linebreaks.</q>

        Despite the fact that we can include a "cite" attribute, it's most useful to include a <cite></cite> text
        element in the text/link/quote body as most browsers don't do anything with the "cite" attribute.

    Abbreviations:
        The <abbr> element provides a tooltip on mouse hover for a short explanation of a term (typically the full form
        of an abbreviation).
        <abbr title="National Marlon Brando Look-Alikes">NAMBLA</abbr>

    HTML Page Author:
        We can put the page author name and details in the HTML head with:
            <meta name="author" content="Keith Penney">
        We can also use the <address> element to format the page author's contact info.
            <address><p>Keith Penney, Oakland, CA, etc.</p></address>

    Representing Code:
        <code></code>       Represents computer code.  Formatted specially.
        <pre></pre>         Same as <code> but preserves whitespace formatting.
        <var></var>         Used as an inline reference to a code variable.
        <kbd></kbd>         Used to designate keyboard entry (looks like terminal input)
        <samp></samp>       A 'sample' of output (looks like terminal output)

    Time and Date:
        HTML provides special elements for marking up times and dates in a machine-readable format.
            e.g. <time datetime="2018-02-19">February 19th, 2018</time>
                 <time datetime="06-11">11 June</time>
                 <time datetime="08:45">8:45 AM</time>
        Full Datetime Format: yyyy-mm-ddThh:nn:ss.ccc-zz:zz
            yyyy  = year (4 digits)
            mm    = month (2 digits)
            dd    = day (2 digits)
            T     = Keyletter 'T' separates date and time
            hh    = hour (2 digits; 24hr clock)
            nn    = minutes (2 digits)
            ss    = seconds (2 digits)
            ccc   = milliseconds (3 digits)
            zz:zz = timezone offset (e.g. -07:00 for PST).  The '-' can also be a '+' for Europe, Japan, etc.

Page Layout Elements:
    <header></header>   Header bar; typically a logo or site name that persists across pages.
    <nav></nav>         Navigation bar; normally contains navigation links that persists across pages.
    <main></main>       Main content; the big section in the middle where all the content unique to the page goes.
                        Should only be used once per page, directly inside <body> (not nested in anything else)
      <article></article>   A subsection of <main>; a block of related text that stands alone (e.g. a blog post)
      <section></section>   A subsection of <main>; similar to an article.
      <div></div>       Non-semantic.  Used if you can't think of a more appropriate semantic block.
    <aside></aside>     A sidebar; often placed inside <main>.  Additional related info 
    <footer></footer>   A footer; contains (e.g.) sitemap, contact info, press, careers, copyright, etc.

    <br>            Forced linebreak.  Use to manually structure text linebreaks.
    <hr>            Horizontal rule (normally a horizontal line); breaks up unrelated sections of content.

Attributes:
    lang=""                     A language attribute can be added to any text element.  It helps browsers, translators.
    href=""                     Hypertext REFerence.  Link to a URL.  Can be applied to any text element (typically <a>)
    title=""                    Define a tooltip on mousehover for links.
    id=""                       Specify an ID for linking (usually for a heading text)

Lists:
    There are two types of lists: unordered and ordered.
    There is also the related 'description list' (see below).
    Lists can be nested.
    Unordered Lists:
        Often rendered as a bullet list.
        <ul>                        <!-- Begin the unordered list -->
          <li>Some item</li>        <!-- A list item -->
          <li>Another item</li>     <!-- Another list item -->
          <li>A Manbearpig</li>     <!-- Yet another item -->
        </ul>                       <!-- End the unordered list -->

    Ordered Lists:
        Often rendered as a numbered list.
        <ol>
          <li>The first item</li>   <!-- A list item -->
          <li>The second item</li>  <!-- Another list item -->
          <li>The last item</li>    <!-- Yet another item -->
        </ol>

    Description List:
        A list of description terms (<dt></dt>) and description definitions (<dd></dd>) for each term.
        <dl>
          <dt>LOL</dt>
            <dd>Laugh Out Loud.  Typically used when not laughing at all.</dd>
          <dt>FML</dt>
            <dd>Fudge My Life.  Typically used by overly priviledged children when mildly inconvenienced.</dd>
          <dt>HTML</dt>
            <dd>HyperText Markup Language.  Still kicking after all these years.</dd>
        </dl>

Tables:
    HTML tables can be very useful for laying out tabular data.
    Tables are NOT to be used for general struturing of a page layout.
    Typically you define the structure of a table in HTML, then apply custom styling in CSS to make it pretty.
    Elements:
        <table></table>     The main table element.  Should wrap the entire table.
        <td></td>           Table Data.  A single cell of the table.
        <tr></tr>           Table Row.  Start a new row of the table.
        <th></th>           Table Header.  Same as <td></td> but formats differently for a row/column header.
    Attributes:
        rowspan=""          Define a number of rows to span across.  Effectively adds a cell to subsequent rows.
        colspan=""          Define a number of columns to span across.
        scope=""            Used with <th>.  Can be "col" or "row".  Define what the header applies to.
                            Can also be "colgroup" and "rowgroup" if header applies to span of rows/cols.
        id=""               Used with <th> for accessibility.  Define an ID name for that row/col.
        headers=""          A list of ID's.  Used with <td>.  Defines exactly where the cell sits in the table.
                            E.g. for col id="X", row id="Y", headers="X Y" (or "Y X")

    Applying Styling:
        Applying styling to a row is simple - just reference a CSS class (or explicitly define the style) in the <tr>
        element for the desired row.
        Applying styling for columns would be harder because you'd normally have to duplicate the styling for each cell
        in a column.  Fortunately, there's a better way.  We can define the styling for each column in a table by using
        the <colgroup> and <col> elements.
        <!-- Example: Styling a three-column table -->
        <table>
          <colgroup>
            <col>                                   <!-- The first column is unstyled -->
            <col style="background-color: blue">    <!-- The second column has a blue background fill -->
            <col style="border:4px solid #000000">  <!-- The third column has a black border -->
          </colgroup>
          <tr>
            <!-- All the table content is omitted for brevity -->
          </tr>
        </table>

    Optional Elements:
        <colgroup></colgroup>   See styling above.
        <col></col>             See styling above.
        <caption></caption>     A brief description of the table.  Helpful for accessibility.  Directly follows <table>
        <thead></thead>         Table header.  Useful for CSS styling.  Wraps <tr></tr> for the header row.
        <tfoot></tfoot>         Table footer.  Same as <thead> but for the footer row.
        <tbody>                 Table body.  Same as <thead> but for the body content.

Images:
    Images are embedded with the empty element <img> and its attributes.
        <img src="http://..." alt="A description of the image.">
    Attributes:
        src=""      The source (path, URL) of the image.
        alt=""      Alternate text which is displayed if the image cannot be.  Also read by screen readers.
                    Do not include alt text for decorative images - only for content.
        width=""    Specify the width of the image in pixels.
        height=""   Specify the height of the image in pixels.
                    If height/width specified, the browser leaves space for the image even if it can't load.
        title=""    Provide a title for the image which appears as a tooltip on mouse hover.

    Figures and Captions:
        To properly associate a caption to an image (suitable for screen readers), it's best to use the format
        containers <figure> and <figcaption> introduced in HTML5.
        <!-- Example -->
        <figure>
          <img src=".../pic.jpg"
               alt="A picture of visible stuff.">
          <figcaption>This picture is dope.  This caption is also really good.</figcaption>
        </figure>

    Icons:
        <!-- basic favicon -->
            <link rel="shortcut icon" href="">
        <!-- third-generation iPad with high-resolution Retina display: -->
            <link rel="apple-touch-icon-precomposed" sizes="144x144" href="">
        <!-- iPhone with high-resolution Retina display: -->
            <link rel="apple-touch-icon-precomposed" sizes="114x114" href="">
        <!-- first- and second-generation iPad: -->
            <link rel="apple-touch-icon-precomposed" sizes="72x72" href="">
        <!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: -->
            <link rel="apple-touch-icon-precomposed" href="">

    Responsive Design:
        Responsive design is web design for a vast variety of different screen sizes.  New features in HTML5 enable
        much greater control over displaying images for different screen sizes and resolutions.
        <!-- Example: Resolution Switching -->
        <img srcset="pic-320w.jpg 320w,         <!-- srcset syntax: FILENAME.jpg WIDTHw -->
                     pic-480w.jpg 480w,         <!-- 'w' is used for the image's width in pixels, not 'px'-->
                     pic-800w.jpg 800w"
             sizes="(max-width: 320px) 280px,   <!-- sizes syntax: MEDIA-CONDITION SLOT-WIDTHpx -->
                    (max-width: 480px) 440px,   <!-- the 'slot width' is the alotted width for the image -->
                    800px"
             src="pic-800w.jpg" alt="A picture of something">

        Art Direction:
            Art direction is when you decide you want to replace an image (e.g. re-crop) rather than simply resize for
            a screen of a different resolution or aspect ratio.  In this case, you could do something like this:
            <!-- Example: Art Direction -->
            <picture>
              <source media="(max-width: 799px)" srcset="pic-480w-crop.jpg">
              <source media="(min-width: 800px)" srcset="pic-800w.jpg">
              <img src="pic-800w.jpg" alt="A picture of something">
            </picture>
            In this example, the "media" attribute takes a "media condition" as does the "sizes" attribute in the above
            example.  The "media" attribute should only be used if you need art direction.  Otherwise, use the example
            above or the "type" attribute (to switch between types based on browser compatibility).

Vector Images - SVG:
    SVG is an XML-based language for describing vector images.  Interestingly, SVG 'images' can be opened in a
    text editor!  Try it!
        <!-- Simple SVG Example -->
    <svg version="1.1" baseProfile="full" width="300" height="200" xmlns="http://www.w3.org/2000/svg">
      <rect width="100%" height="100%" fill="black" />
      <circle cx="150" cy="100" r="90" fill="blue"  />  <!-- center (cx, cy), radius r -->
    </svg>

    Including SVG Images:
        Using <img>:
            You can include SVG graphics as normal images with the <img> element.
            Pros: simple.  Cons: cannot manipulate with JavaScript or external CSS stylesheets
        Include Directly with <svg>:
            You can include the SVG code directly as in the above example.
            Pros: can reduce loading time if simple; can assign classes and IDs to elements w/in the SVG
            Cons: makes duplication difficult; increases code size/complexity; browser cannot cache as it would <img>
        Include as iFrame: <iframe src="my-image.svg" width="500" height="200" sandbox>
            This is not a good approach.  Tends to not be supported properly.

Video and Audio:
    HTML5 introduced new elements that enable native embedding of video and audio as well as JavaScript APIs to
    format and manipulate them.
    Video:
        A quick note on video formats.  "WebM" and "MP4" are 'container formats' which contain separately formatted
        audio and video.  WebM packages Ogg Vorbis audio with VP8/VP9 video and works best with Firefox and Chrome.
        MP4 packages AAC or MP3 audio with H.264 video and works best with IE and Safari.
            <!-- Basic Example -->
        <video src="rabbit.webm" controls>
          <p>It looks like your browser doesn't support HTML5 video.  Here's a link to the video: 
             <a href="rabbit.webm">Download video</a></p>
        </video>
            <!-- Alternatively provide different source types for browser compatibility -->
        <video controls>
          <source src="rabbit.webm" type="video/webm">
          <source src="rabbit.mp4" type="video/mp4">
          <p>Browser doesn't support.  Link: <a href="rabbit.mp4">download</a></p>
        </video>

        Attributes:
            src=""      Same as image 'src' attribute.  A path or URL.
            controls    This tells the browser to use the default controls for the video.  Otherwise, provide custom.
            autoplay    Don't use this.  For real.
            loop        Also don't use this.
            muted       A nice feature to default the video to muted.
            poster=""   A splash image displayed before the video is played.
            preload=""  Buffer the video file.  Values: "none", "auto", or "metadata"

        Captions and Subtitles:
            You can make your own captions file using WebVTT (simple syntax) and including it with the video as:
                <track kind="subtitles" src="my-subtitle-track.vtt" srclang="en">
            This not only improves accessibility, but also helps with search engine optimization (SEO)

    Audio:
        The <audio> element is basically the same as <video> but with the visual components removed.

Other Embedded Media:
    iFrames:
        The <iframe> element allows for embedded entire webpages in another webpage.  They are what is typically used
        when embedding a Google Map or a YouTube video.  Comes with some security concerns.
            <!-- Example -->
        <iframe src="https://..." width="100%" height="500" frameborder="0" allowfullscreen sandbox>
          <p> It looks like your browser does not support iFrames.  Here's a link instead: <a href="https://...">The page</a></p>
        </iframe>
        
        Attributes:
            allowfullscreen     Allows the iframe to be placed into fullscreen mode.
            frameborder=""      Values: "1" draws a border, "0" does not.  Recommended to just use CSS.
            sandbox             Requests heightened security settings.

        Mitigating Security Concerns:
            Never embed from HTTP, only from HTTPS (encrypted).
            Always use the 'sandbox' attribute.  This disables all permissions of the iFrame.  If you need to add
            permissions, give them individually with sandbox="" (see 'sandbox' in HTML5 specs)
                Never give both "allow-scripts" and "allow-same-origin" to a 3rd party iFrame.  This can be bad!
            Configure your content security policy (CSP) directives (see below) for optimum security.

    The <embed> and <object> elements:
        These are mostly used in legacy systems and are not recommended for new designs.  They were used to embed
        pdfs, applets, flash, etc. which are all being phased out.
        Note: pdfs are still actively supported, but modern design recommends linking to pdf docs rather than embedding.

Forms and Input Fields:
    An HTML form provides ability to interface with the user and send/receive data between the user and a server.
    By itself, an HTML form can't really do anything - it needs to be connected to a server to handle the data posted
    by the form.
    Note: if a widget is used outside of a <form>, it will have no intrinsic behavior and custom JavaScript behavior
    must be defined for it to have any function (can instead use the 'form' attribute below).

    Elements and Attributes:
        <form></form>           Formally defines a form.  All HTML forms begin with this.
            action=""           Defines the location (URL) where the form's data should be sent after submission.
            method=""           Can be "get" or "post".  Defines an HTTP method to send data with.
        <input>                 A single-line text input widget.
            type=""             Defines the type of <input>.  Can be "text", "email", "submit", "radio", "checkbox"
            value=""            Define a default value (returns to this on reset).
            placeholder=""      Like "value" but it disappears when user enters content.
            readonly            Boolean.  User cannot modify the value.
            required            Boolean.  Client-side form validation.  Form won't submit without valid data here.
            length=""           Maximum number of characters which can be entered.
            size=""             The width of the widget.
            checked             Boolean.  Used with radio button or checkbox.  Define default state.
            pattern=""          Provide a pattern (regex) for input validation.
            minlength=""        Provide a minimum length for valid data.  Also works for <textarea>
            maxlength=""        Provide a maximum length for valid data.  Also works for <textarea>
        <textarea></textarea>   A multi-line text input widget.
            cols=""             Number of columns.  Default is 20
            rows=""             Number of visible rows.
            wrap=""             Define how control is wrapped.  Can be "hard" or "soft"
        <button></button>       A clickable button.  The button's displayed content goes between the tags.
            type=""             Can be "reset" (reset all widgets), "submit" (sends form's data to URL in form's
                                "action" attribute), or "button" (default; does nothing w/o JavaScript customization)
        <label></label>         Create a text label associated with an input widget (sticks to the widget). Clickable!
            for=""              The ID of the associated widget.  Improves accessibility.
        <fieldset></fieldset>   Creates a box around widgets contained within its tags.  Improves accessibility.
                                Should always be used when using a set of radio buttons.
        <legend></legend>       Creates a label for a <fieldset> box
        <select></select>       Create a select (drop-down) box.
            multiple            Boolean.  Allow multiple selections.
        <option></option>       Add an option to a <select> or <datalist> box.
            selected            Boolean.  Default selected option when form loads.
        <optgroup></optgroup>   Define a group of options for a <select> or <datalist> box.  Best for long lists.
        <datalist></datalist>   Create an autocomplete box.  Text input with suggested values.

    Attributes:
        id=""                   A unique ID corresponding to that widget.
        name=""                 A name which will be 'stapled' to any data originating from this widget.
        disabled                Boolean.  Disables (greys out) the field.
        autofocus               Boolean.  Makes this widget the default focus when the page loads.  Highlander rules.
        value=""                The element's initial value.
        form=""                 Associate an element with a <form> even if it's not included w/in it.  New in HTML5.
        multiple                Boolean.  Allows multiple entries in a single field.
                                Used with <input> of type "email", "password", "search", "tel", "url", etc.

    Advanced Input Widgets:
        We can use advanced features of input widgets to perform client-side data verification (relieve some pressure
        on our server side and verify data before sending).  The widget will highlight and provide a tooltip if the
        data entered does not match the specified values.
        <!-- Example -->
        <input type="number" name="user_uint8" id="uint8" min="0" max="255" step="1">
        <!-- This input takes only whole numbers (step="1") between 0 and 255 inclusive and includes a spinner -->

        Note! If using <input type="range"> (i.e. a 'slider bar'), the value of the slider is not displayed on the
        page.  This functionality requires JavaScript.

        Date and Time:
            HTML5 introduced new intput types to simplify collecting date/time values in forms.  All these can use
            the 'min' and 'max' attributes to constrain the range of acceptable values.
            "datetime-local"    Provides a widget to pick a date and time w/o timezone information.
            "month"             Pick a month of the year.
            "time"              Pick a time value.
            "week"              Pick a week number and year.
            "date"              Choose a generic date.

        Color Chooser:
            <input type="color"...> provides a widget to select a color (visually and textually).  New in HTML5

        File Chooser:
            <input type="file"...> provides a widget to select a file (dialog).
                accept=""       Provide a wildcard for e.g. file extensions, path folders
                multiple        Boolean.  Allow multiple files selected.

        Hidden Content:
            Sometimes it's useful to send hidden content from an HTML form.
            <input type="hidden" name="" value=""> Must set name and value for hidden content.

        Image Button:
            <input type="image" alt="Click here" src="" width="" height="" />
            Creates a button that behaves like a "submit" button but it's visually represented by an image.
            When the value is sent, it submits the (x, y) coordinates where the user clicked on the image.

        Progress Bar:
            <progress max="100" value="75">75/100</progress>
            This creates a progress bar whose value obviously must be updated by JavaScript.
            The content inside the tags is used as fallback for unsupported browsers or screen readers.

        Meter Bar:
            <meter min="0" max="100" value="75" low="33" high="66" optimum="50">75</meter>
            A meter bar can be a good visual indicator of a fluctuating value (e.g. password strength).
                min/max         Defines the min/max values of the meter.
                low/high        Defines the threshold for a "high" value and a "low" value (renders differently).
                optimum=""      Defines an optimum value.

    Form Validation:
        HTML5 Built-in Form Validation:
            HTML5 provides several attributes and methods for automatic client-side form validation.
            Combining these features with the CSS pseudo-classes ":valid" and ":invalid" allows for simple visual
            feedback to the user before the form is submitted.
            <!-- CSS Example -->
              input:invalid {
                border: 2px dashed red;
              }
              input:valid {
                border: 2px solid black;
              }

            Using the "pattern" attribute with regular expressions (regex):
            <!-- Example --> \({0,1}[0-9]{3}\){0,1}[ -\.]{0,1}[0-9]{3}[ -\.]{0,1}[0-9]{4}
            <!-- Matches a US phone number in all my favorite formats.  Note lots of escaped characters -->

            Both <input> and <textarea> elements can use the attributes "minlength" and "maxlength" to restrict the
            length of data considered valid.

        JavaScript Form Validation:
            To customize form behavior or look/feel, you'll probably need to use JavaScript as the validation method
            customization in HTML is limited.

    Sending Form Data:
        All data entered into an HTML form must be sent to a separate page (server) to process.  The <form> element's
        "action" attribute defines the page which will receive the form data.
        To prepare our data for sending, we need to give every input field a unique name, using the "name" attribute.
        On the receiving end, the server will see each piece of data arrive with its associated "name"
        All data sent over HTTP is sent as text, except for sending files as binary data (see below).

        Sending Binary Data (files):
            By default, the Content-Type attribute of HTTP POST and GET methods is "application/x-www-form-urlencoded"
            To send binary data, you must use the POST method and set the "enctype" attribute to "multipart/form-data"
            for the form element.  To select a file, implement a file chooser (see above).
            Before sending, make sure to check the maximum file size on the server side.

        Server-Side Concerns:
            Make sure to scrub your shit for cross-site scripting/request forgeries, SQL injection, HTTP header
            injection, etc.  Just don't be an asshole.

Debugging:
    Debugging HTML can be tricky because browsers parse HTML permissively, meaning it will render the document
    regardless of syntax or logic errors that may be present.
    Some helpful debugging tools:
        Browser Developer Tools - built into most modern browsers.
            DOM Inspector allows you to compare the HTML to the rendered output and interact with the page in realtime.
        HTML Validator - Markup Validation Services.
            The W3C standards organization maintains an HTML markup validation service which provides a nice list of
            errors and line numbers.

CSP (Content Security Policy) Directives:
    The CSP directives are a set of HTML5 header metadata options that can be set for heightened security.
    Syntax:
        Content-Security-Policy: <policy-directive>; <policy-directive>
    Fetching Directives:
        frame-src       Specifies valid sources for nested browsing via <frame> and <iframe> elements.
        img-src         Specifies valid sources for images and favicons.
        media-src       Specifies valid sources for <video>, <audio>, and <track>
        script-src      Specifies valid sources for JavaScript
        style-src       Specifies valid sources for stylesheets (CSS).
    Navigation Directives:
        form-action     Restricts the URLs which can be used as a target for form submissions.
        frame-ancestors Specifies valid parents which may embed a page using <iframe>, <object>, <embed>, etc.
    Other Directives:
        block-all-mixed-content Prevents loading any HTTP assets when page is loaded using HTTPS

HTTP Methods:
    HTTP (HyperText Transfer Protocol) specifies several methods for sending and receiving data across the web.
    Each HTTP request consists of a header and a body.
    Header: global metadata about the browser
    Body:   information specific to the request
    The server receives data as a string and must parse it.
    HTTP requests can be viewed using the developer tools (e.g. Tools->Web Developer->Network on Firefox)

    GET:
        The HTTP GET request asks a server to send back a given resource.  The body of the GET request is emtpy.
        If an HTML form sends a GET request to a server, the form data is sent to the server directly appended to the
        server URL (with an intervening '?').  Data are delimited with ampersands '&'
            <!-- Example --> www.foo.com/?myname=Keef&myage=29
        The actual GET request looks like this:
            GET /?myname=Keef&myage=29 HTTP/1.1
            Host: foo.com

    POST:
        The HTTP POST request asks a server to consider the data provided in the body and send back a response (rather
        than just a known stored value as in the GET method).  If an HTML form sends a POST request to a server, the
        form data is appended to the body of the HTTP request.  In this case, you see nothing extra in the URL.
        From the previous example, the POST request looks like this:
            POST / HTTP/1.1                                     <!--        -->
            Host: foo.com                                       <!-- |    | -->
            Content-Type: application/x-www-form-urlencoded     <!-- Header -->
            Content-Length: 20                                  <!-- |    | -->

            myname=Keef&myage=29                                <!--  Body  -->

HTTP Server Frameworks:
    PHP:
        Server-side scripting language for parsing data from HTTP requests.  Originally called "Personal Homepage Parser"
        PHP includes several objects built for parsing and accessing data sent via the POST and GET HTTP methods.
        Cannot be directly interpreted in a browser; must run on a PHP server (local or remote).

    Python: Flask, Django
        Django is a BSD-licensed web framework written in Python.
        Flask is a pared-down BSD-licensed web framework also written in Python; still on pre-release versions.

    Ruby on Rails:
        Popular web framework written for Ruby.  Used all over the place.

CSS:
    <link rel="stylesheet" href="my-css-file.css">      Link a css stylesheet to your HTML document.

Javascript:
    <script src="my-js-file.js"></script>               Include a javascript file.  Note the closing tag!
                                                        Note!  This is best included right before </body>

