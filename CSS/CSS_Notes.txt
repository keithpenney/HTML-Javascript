CSS Notes

General:
    "Cascading Style Sheets"
    CSS is a language for specifying how a document is presented visually.  The document can be HTML, XML, SVG, etc.
    Browsers apply CSS "rules" to the document; converts both into a Document Object Model (DOM)
    /* Comments go inside C-like multiline comment characters. */
    When multiple conflicting rules apply to an element, the rules that are used are determined by "the cascade."

CSS with HTML:
    An HTML document can either link to an external CSS file or contain the CSS code directly in the HTML head.
    The latter is called an "internal stylesheet"
    <!-- Example -->
    <html>
      <head>
        <link rel="stylesheet" href="myCSS.css">        <!-- A link to an external CSS file -->
        <style>
          ...                                           /* CSS code can go directly here between the <style></style> */
        </style>
      </head>
    </html>

    CSS can also be applied in-line to individual elements via the "style" attribute.  This is not recommended.


CSS Syntax:
    CSS code is a series of rules (declarations) applying to a "selector", which consist of "properties" and "values".
    Selector: A pattern that matches some element(s) in the HTML document.  Can be a list of patterns (comma-separated)
    Properties: human-readable identifiers indicating which visual features you want to change (e.g. font, background)
    Values: what you want to change the property to (e.g. a color, font-family, size, etc.)
    If a value provided for a property is not recognized by the browser, it is considered invalid and is ignored.

    /* Basic Syntax */
    selectorList {              /* "selectorList" is: selector[:pseudo-class][::pseudo-element][, more selectorLists] */
      property: value;          /* Note the mandatory colon ":" and semicolon ";" */
      ...                       /* More declarations can go here */
    }                           /* This whole structure is called a "declaration block" */

    Syntax Look-Up Table:
        @foo                    @-rule (at-rule)
        .foo                    Class selector
        #foo                    ID selector
        :foo                    Pseudo-class
        ::foo                   Pseudo-element

    At-Rules (@-rules):
        A CSS rule with a selector beginning with the @ sign are called "at-rules" (or "@-rules").
        These are used to convey metadata or to conditionally apply nested rules.
        E.g. to apply a rule to all devices with screen width above 800px, we can nest the rule inside an @-rule:
            /* @-rule example */
            @charset "utf-8" ;              /* Declare the charset to be utf-8.  Must be first line of the file */
            @import local("myfont.ttf");    /* Import a locally-stored font */
            @media (min-width: 801px) {     /* This @-rule only applies to media devices with screen width > 800px */
              body {
                margin: 0 auto;
                width: 800px;               /* We can safely set 800px since we filtered out all incompatible devices */
              }
            }
        Examples:
            @charset            Specify the character encoding used in the stylesheet e.g. "utf-8"
                                Must be the first element in CSS file.  Cannot be used in HTML <style> element.
            @import             Import a style rule from another sheet.  Must come directly after @charset
            @font-face          Specify a font.  url("https://.../myFont.ttf"), local("./myFont.ttf")
            @media              Applies nested only if the hardware device matches the tested condition(s).
            @supports           Applies nested only if the browser supports the tested feature(s).
            @document           Applies nested only if the current page (HTML doc) matches the tested condition(s).

Selectors:
    Simple Selectors: Match elements by element type, class, or id
    Attribute Selectors: Match elements based on attributes/attribute values
    Pseudo-classes: Match elements that exist in a certain state (e.g. "disabled", "focus", "hover")
    Pseudo-elements: Match parts of elements based on their position relative to an element (e.g. first in line)
    Combinators: A combination of two or more selectors to specify an interection between two categories.
    Selector List: You can of course apply the same declaration block to multiple selectors
    Universal Selector: The asterisk "*" applies to all elements.  Mostly only used in combinators.

    Class Selectors:
        Any HTML element can be given a "class" attribute which is a space-separated list of user-generated names
        These class names can then be treated as selectors in CSS when preceded by a period "."

    ID Selectors:
        Any HTML element can be given an "id" attribute which is UNIQUE to that object.
        A class can apply to many objects, and id can only apply to one!  UB occurs if the same id is repeated.
        ID names are treated as selectors in CSS when preceded by a pound sign "#"

        Class/ID Example:
            /* -- CSS -- */
            .fancy {                    /* A class name */
              font-family: cursive;
            }
            .red {                      /* Another class name */
              color: red;
            }
            #keef {                     /* An ID name.  Applies to only ONE element */
                background-color: #DDDDDD;
                text-shadow: 1px 1px 1px black;
            }
            <!-- HTML -->
            <h1 id="keef">This is a unique object.  We'll give it an ID name.</h1>
            <div class="fancy">This text is the 'fancy' class</div>
            <p class="red">This text is the 'red' class</p> 
            <div class="red fancy">This text implements both the 'fancy' class AND the 'red' class</div>

    Attribute Selectors:
        You can also define a selector which applies to elements with a particular attribute defined or assigned a
        particular value.

        Attribute Selector Exammple:
            /* -- CSS -- */
            [data-species] {                /* Match any element with 'data-species' defined */
              font-weight: bold;
            }
            [data-species="hat-en"] {       /* Match any element with 'data-species' assigned to exactly "hat-en" */
              text-shadow: 1px 1px 1px red;
            }
            [data-species*="gendered"] {    /* Match any element whose 'data-species' attribute contains "gendered" */
              background-color: pink;       /* Alternatively: [data-species~="gendered"] treats the attribute value */
            }                               /* as a space-separated list of values */
            [data-species^="animal"] {      /* Match any element whose 'data-species' attribute begins with "animal" */
              font-size: 1.2em
            }
            [data-species$="en"] {          /* Match any element whose 'data-species' attribute ends with "en" */
              font-style: normal;
            }
            [data-species$="fr"] {          /* Match any element whose 'data-species' attribute ends with "fr" */
              font-style: italic;
            }
            <!-- HTML -->
            <ul>
              <li data-species="animal-dog-en">Dog</li>
              <li data-species="animal-dog-fr gendered">Chien(ne)</li>
              <li data-species="animal-fox-en">Fox</li>
              <li data-species="animal-fox-fr">Renaud</li>
              <li data-species="hat-en">Hat</li>
              <li data-species="hat-fr">Chapeau</li>
            </ul>

    Pseudo-Classes:
        When you want to stylize elements based on their state, you can use pseudo-classes which are keywords preceded
        by a semicolon ":".
        :active             Elements which are currently active (e.g. after mouse click, before mouse release)
        :any()              Define a list of OR'd options.
        :checked            Elements which are checked (e.g. checkbox, radio button)
        :disabled           Any currently disabled element.
        :enabled            Any currently enabled element.
        :focus              Any element that currently has the focus.
        :hover              An element being hovered over.
        :in-range           An input element whose value is currently in range.
        :invalid            A form or input element whose value is not valid.
        :not()              An element that does not match a list of selectors.
        :optional           A form element that doesn't have the "required" attribute
        :out-of-range       An input element whose value is currently out of range.
        :required           A form element that has the "required" attribute
        :valid              A form or input element whose value is valid.
        :visited            A link that the user has already visited.

    Pseudo-Elements:
        Pseudo-elements are like pseudo-classes but are keywords preceded by two semicolons "::"
        These can be used to apply custom formatting to specific sub-parts of target elements.
        It is also common to use pseudo-elements and the "content" property to insert CSS-generated content (text/img).
        ::after             Used to insert content immediately after (in-line) the target element
        ::before            Used to insert content immediately before (in-line) the target element
        ::first-letter      Apply formatting to the first letter of an element
        ::first-line        Apply formatting to the first line of an element (line-break depends on screen size)
        ::selection         Apply formatting to a section of text that has been highlighted by the user

    Selector Combinations (Combinators):
        We can apply the same formatting rules to several elements at once or to elements with a particular
        relationship to other elements.  Since a document of moderate complexity can easily have hundreds of elements,
        we need a way to be hyper-specific about the elements we are referring to.  Therefore, we have several
        operators to define combinations and relationships between elements.

        Given A and B are any valid selectors:
        A, B        Any element matching A OR B (boolean OR)
        A B         Any element matching B which is a descendent of an element matching A (e.g. child, grandchild, etc.)
        A > B       Any element matching B which is a direct child of an element matching A (not grandchild)
        A + B       Any element matching B that is the very next sibling (child of same parent) of an element matching A
        A ~ B       Any element matching B that is one of the next siblings of an element matching A

Properties:
    Values:
        inherit             Set the value to the corresponding value of its parent element.
        initial             Set the value to that of the default style sheet for the browser.  If no default -> inherit
        unset               Reset the property to its 'natural' value; if naturally inherited -> inherit; else -> initial
    Units:
        Absolute Units:
            px, mm, cm, in, pt, pc      Pixels, millimeters, centimeters, inches, points (1/72"), picas (12pt)
            s, deg                      Seconds, degrees (angle)
        Relative Units:
            %       Percentage relative to the corresponding value of the element's parent
            em      1em is the same as the inherited font size of the current element (width of capital M)
            rem     The 'rem' is the same as 'em' except inheritance doesn't affect its size.
            vw,vh   The 'vw' and 'vh' units are 1/100th the width and height of the viewport, respectively.
        Unitless Numbers:
            Sometimes numbers can be used without units; often is interpreted as "proportion of default number"

    Functions:
        CSS has basic built-in functions.  Any keyword followed by parentheses () is a function.
        Example: url(), rotate(), translate(), calc(), rgba(), hsla()

Layout:
    The Box Model:
        CSS models each element as a rectangular box with various layers.
        margin: the outermost layer, outside the border
        border: inside the margin, outside the padding
        padding: inside the border, outside the content
        content: inside the padding.  Has properties "width" and "height"

Common Properties and Values:
    Syntax: Possible literal values are contained within braces {} and separated by bars |
            Alternate equivalent values are provided in parentheses ()
            [N] stands for any positive number in decimal base
            [H] stands for any positive digit in hexadecimal base
            [b] stands for any positive integer between 0 and 255 (a byte)
            Regex-like syntax used for many related values (e.g. "[1-9]00" can be "100" or "800" but not "110" or "1300")

    Shorthand Properties:
        Some properties allow specification of several properties at once, which can save a lot of space.
        background:         <background-color> || <background-image> || <background-position> || <background-repeat> || <background-scroll>
        text-decoration     <text-decoration-line> || <test-decoration-style> || <text-decoration-color>
        text-shadow         <horizontal offset> <vertical offset> <blur radius> <base color>
        border              <border-top> || <border-right> || <border-bottom> || <border-left>
        padding             <padding-top> || <padding-right> || <padding-bottom> || <padding-left>
        margin              <margin-top> || <margin-right> || <margin-bottom> || <margin-left>

    Text Elements:
        color               {<color> | #[HHHHHH] | rgb([b], [b], [b]) | hsl([N], [N]%, [N]%) | currentcolor}
        font-family         {<family-name> | <generic-family>} /* Can be a list of acceptable values.  See "Fonts" below */
        font-size           {xx-small | x-small | small | medium | large | x-large | xx-large | [N]px | [N]em | [N]%}
                            /* Note: when specifying a percentage, it is relative to the parent's font size. */
        font-style          {normal | italic | oblique}
        font-weight         {normal (400) | bold (700) | lighter | bolder | [1-9]00} /* "...er" relative to parent weight*/
        text-align          {center | left | right | justify}
        text-transform      {none | uppercase | lowercase | capitalize | full-width}

        text-decoration-line    {none | underline | overline | line-through} /* Can be combination of any of these */
        text-decoration-style   {solid | double | dotted | dashed | wavy} /* Applies to the 'line' portion */
        text-decoration-color   {<color> | #[HHHHHH] | rgb([b], [b], [b]) | hsl([N], [N]%, [N]%) | currentcolor}

    Size/Layout:
        opacity             {[0-1], [0-100]%}
        height
        width
        display             {inline | block | inline-block}
        margin
        padding
        border-width
        border-style
        border-color
        overflow            {auto | hidden | visible} /* Determines how content overflow is handled (clipped, scroll) */

Fonts:
    Due to the complexity and shear number of fonts available, let's give them their own section.
    The 'font-family' property can take either a literal font name (in quotes) or a <family-name> or <generic-family>

    Font Families: (Generic name listed last)
        .serif {
            font-family: Times, Times New Roman, Georgia, serif;
        }
        .sansserif {
            font-family: Verdana, Arial, Helvetica, sans-serif;
        }
        .monospace {
            font-family: Lucida Console, Courier, monospace;
        }
        .cursive {
            font-family: cursive;
        }
        .fantasy {
            font-family: fantasy;
        }

    Web-Safe Fonts:
        A non-exhaustive list of fonts generally supported on all systems/browsers.
        Arial, Courier New, Georgia, Times New Roman, Trebuchet MS, Verdana

    The <color> Datatype:
        Keywords:
            Anything that accepts a <color> datatype can accept a ridiculous number of keywords for colors.
            Examples: red, green, purple, teal, azure, blanchedalmond, mediumorchid
            A full list: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
        Hex Codes:
            Standard hex-codes for 24-bit RGB "#RRGGBB" where 'RR', 'GG', and 'BB' are hex bytes for red, green, blue
        RGB:
            The rgb(R, G, B) function takes decimal numbers as "R", "G", and "B" instead of hex like hex-codes
            The rgba(R, G, B, A) function adds an alpha channel (0-1) for transparency
        HSL:
            "Hue Saturation Lightness" -> hsl(H, S, L)
            Hue (H): 0-360; angles around the color wheel
            Saturation (S): 0-100% (0 being greyscale)
            Lightness (L): 0-100% (0 being black, 100% being white)
            The hsla(H, S, L, A) function adds an alpha channel (0-1) for transparency

The Cascade:
    These are the rules by which conflicts between declarations are resolved.
    Here is the heirarchy listed from highest to lowest priority (descending).

    1. Importance:
        If any property value has the "!important" tag, it will always win.
        The use of "!important" is highly discouraged.
    2. Specificity: 
        Listed are selector types in decreasing specificity order.
        Specificity is calculated by summing all these categories as if they were decimal places ('a' is MS, 'd' is LS)
        a. Anything inside an element's "style" attribute (in the HTML code)
        b. ID selectors
        c. Class selectors, attribute selectors, pseudo-classes
        d. Element selectors, pseudo-elements
    3. Source Order:
        Rules listed later (higher line number) in the CSS code win.
